{"version":3,"file":"scandit-sdk-angular.mjs","sources":["../../src/lib/scandit-sdk.service.ts","../../src/lib/scandit-sdk-barcode-picker.component.ts","../../src/lib/scandit-sdk.module.ts","../../src/public_api.ts","../../src/scandit-sdk-angular.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BarcodePicker, configure, Scanner } from \"scandit-sdk\";\n\n/**\n * Configuration object for library setup\n */\nexport class ScanditSdkServiceConfig {\n  /**\n   * The license key to be used for configuration.\n   *\n   * @see https://docs.scandit.com/stable/web/index.html#configuration\n   */\n  licenseKey: string;\n\n  /**\n   * Configuration options with the following signature:\n   * {\n   *    engineLocation: string = \"/\",\n   *    preloadEngine?: boolean = true,\n   *    preloadBlurryRecognition?: boolean = true\n   * }\n   *\n   * `options.engineLocation`: The location of the Scandit Engine `scandit-engine-sdk.min.js` and\n   * `scandit-engine-sdk.wasm` (external WebAssembly files). You must copy the relevant files\n   * to a place where they can be served from, e.g. `assets`.\n   *\n   * `options.preloadEngine`: _optional_. Whether to preload (download if needed, compile/instantiate\n   * WebAssembly code and initialize) the external Scandit Engine library, used by BarcodePicker and Scanner\n   * objects to perform scan operations.\n   *\n   * `options.preloadBlurryRecognition`: _optional_. Whether to preload (load or generate if needed) data needed for\n   * blurry recognition as soon as possible via a separate asynchronous WebWorker thread running the Scandit Engine\n   * library. Data for all symbologies is generated over time.\n   *\n   * @see https://docs.scandit.com/stable/web/index.html#configuration\n   */\n  options: {\n    engineLocation: string;\n    preloadEngine?: boolean;\n    preloadBlurryRecognition?: boolean;\n  };\n}\n\n/**\n * Scandit SDK Service handling interaction with the Scandit SDK library, including configuration,\n * initialization and barcode picker creation\n */\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ScanditSdkService {\n  /**\n   * The handler to call in case of an engine load error\n   */\n  private engineLoadErrorHandler: (error: Error) => any;\n\n  private configurationPromise: Promise<void | Scanner> = Promise.resolve();\n\n  /**\n   * Initialize the service and start loading the library based on the passed config options\n   *\n   * @param config Configuration options\n   */\n  constructor(private readonly config: ScanditSdkServiceConfig) {\n    console.debug(\"Loading Scandit library...\");\n    this.loadLibrary(config.licenseKey, config.options);\n  }\n\n  /**\n   * Create a new picker in a given HTML element\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#create\n   *\n   * @param element The HTML element that should contain the picker\n   * @param params The parameters used for creating the picker\n   * @returns A promise resolving to the created BarcodePicker\n   */\n  public createPicker(element: HTMLElement, params?: any): Promise<BarcodePicker> {\n    if (params == null) {\n      params = {};\n    }\n\n    return this.configurationPromise.then(() => {\n      return BarcodePicker.create(element, params);\n    });\n  }\n\n  /**\n   * Add a handler in the event of an error while loading the engine\n   *\n   * @param handler Function to handle an error while loading the engine\n   */\n  public onEngineLoadError(handler: (error: Error) => any): void {\n    this.engineLoadErrorHandler = handler;\n  }\n\n  /**\n   * Configure the library and delegate error handling if needed.\n   *\n   * @param licenseKey The license key used for the library\n   * @param options Configuration options\n   * @param engineLocation The engine location\n   * @param preloadEngine Whether to preload the external Scandit Engine library\n   * @param preloadBlurryRecognition Whether to preload data needed for blurry recognition\n   */\n  private loadLibrary(\n    licenseKey: string,\n    options: { engineLocation: string, preloadEngine?: boolean, preloadBlurryRecognition?: boolean }\n  ): void {\n    this.configurationPromise = configure(licenseKey, options).catch(error => {\n      if (this.engineLoadErrorHandler != null) {\n        this.engineLoadErrorHandler(error);\n      } else {\n        alert(error);\n      }\n      throw error;\n    });\n  }\n}\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, ViewChild } from \"@angular/core\";\nimport {\n  BarcodePicker,\n  Camera,\n  CameraSettings,\n  ScanResult,\n  ScanSettings,\n  SearchArea,\n  SingleImageModeSettings\n} from \"scandit-sdk\";\n\nimport { ScanditSdkService } from \"./scandit-sdk.service\";\n\n/**\n * Scandit SDK Barcode Picker Component handling camera input and scanning operations.\n */\n@Component({\n  selector: \"scandit-sdk-barcode-picker\",\n  template: '<div id=\"scanditsdkbarcodepickercontainer\" #scanditsdkbarcodepickercontainer></div>',\n  styles: [\":host { display: inline-block }\", \"#scanditsdkbarcodepickercontainer { width: 100%; height:100%; }\"]\n})\nexport class ScanditSdkBarcodePickerComponent implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Handle scanned barcodes via a passed ScanResult object\n   *\n   * See https://docs.scandit.com/stable/web/interfaces/scanresult.html\n   * and https://docs.scandit.com/stable/web/classes/barcodepicker.html#onscan\n   */\n  @Output() public scan: EventEmitter<ScanResult> = new EventEmitter<ScanResult>();\n\n  /**\n   * Handle processed frames\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#onprocessframe\n   */\n  @Output() public processFrame: EventEmitter<ScanResult> = new EventEmitter<ScanResult>();\n\n  /**\n   * Handle submitted frames\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#onsubmitframe\n   */\n  @Output() public submitFrame: EventEmitter<ScanResult> = new EventEmitter<ScanResult>();\n\n  /**\n   * Handle errors while scanning\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#onscanerror\n   */\n  @Output() public error: EventEmitter<Error> = new EventEmitter<Error>();\n\n  /**\n   * Emitted when the component is initialized.\n   *\n   * At this moment, the picker is still being created and configured, use `(ready)` to get notified when\n   * the picker is ready.\n   */\n  @Output() public init: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emitted when the picker is ready.\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#onready\n   */\n  @Output() public ready: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Whether there the camera should be accessed.\n   *\n   * Set this to false initially to create the picker without camera access.\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#accesscamera\n   */\n  @Input(\"accessCamera\") private set shouldAccessCamera(newValue: boolean) {\n    this._shouldAccessCamera = newValue;\n    this.setShouldAccessCamera();\n  }\n\n  /**\n   * The active camera\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#setactivecamera\n   */\n  @Input() private set camera(newValue: Camera) {\n    this._camera = newValue;\n    this.setCameraAndSettings();\n  }\n\n  /**\n   * The camera settings\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#applycamerasettings\n   */\n  @Input() private set cameraSettings(newValue: CameraSettings) {\n    this._cameraSettings = newValue;\n    this.setCameraSettings();\n  }\n\n  /**\n   * The initial camera type (can only be set at creation)\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#create\n   */\n  @Input() private set cameraType(newValue: Camera.Type) {\n    this._cameraType = newValue;\n  }\n\n  /**\n   * Whether to enable the camera switcher button\n   */\n  @Input() private set enableCameraSwitcher(newValue: boolean) {\n    this._enableCameraSwitcher = newValue;\n    this.setEnableCameraSwitcher();\n  }\n\n  /**\n   * Whether to enable the torch toggle button\n   */\n  @Input() private set enableTorchToggle(newValue: boolean) {\n    this._enableTorchToggle = newValue;\n    this.setEnableTorchToggle();\n  }\n\n  /**\n   * Set the zoom level of the device\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#setzoom\n   */\n  @Input() private set zoom(newValue: number) {\n    this._zoom = newValue;\n    this.setZoomLevel();\n  }\n\n  /**\n   * Whether to enable pinch to zoom on the camera preview\n   */\n  @Input() private set enablePinchToZoom(newValue: boolean) {\n    this._enablePinchToZoom = newValue;\n    this.setEnablePinchToZoom();\n  }\n\n  /**\n   * Whether to enable camera's video mirroring along the vertical axis\n   */\n  @Input() private set mirrorImage(newValue: boolean) {\n    this._enableMirrorImage = newValue;\n    this.setImageMirrorEnabled();\n  }\n\n  /**\n   * Whether to enable tap to focus on the camera preview\n   */\n  @Input() private set enableTapToFocus(newValue: boolean) {\n    this._enableTapToFocus = newValue;\n    this.setEnableTapToFocus();\n  }\n\n  /**\n   * Which GUI style to use for the barcode picker\n   *\n   * See https://docs.scandit.com/stable/web/enums/barcodepicker.guistyle.html\n   * and https://docs.scandit.com/stable/web/classes/barcodepicker.html#setguistyle\n   */\n  @Input() private set guiStyle(newValue: BarcodePicker.GuiStyle) {\n    this._guiStyle = newValue;\n    this.setGuiStyle();\n  }\n\n  /**\n   * Set the area of the laser displayed when the GUI style is set to laser.\n   * This affects UI only.\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#setlaserarea\n   */\n  @Input() private set laserArea(newValue: SearchArea) {\n    this._laserArea = newValue;\n    this.setLaserArea();\n  }\n\n  /**\n   * Set the area of the viewfinder when the GUI style is set to viewfinder.\n   * This affects UI only.\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#setviewfinderarea\n   */\n  @Input() private set viewfinderArea(newValue: SearchArea) {\n    this._viewfinderArea = newValue;\n    this.setViewfinderArea();\n  }\n\n  /**\n   * Whether the internal scanner should be paused or not\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#pausescanning\n   */\n  @Input() private set paused(newValue: boolean) {\n    this._paused = newValue;\n    this.setPaused();\n  }\n\n  /**\n   * Whether there should be a sound after scanning\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#setplaysoundonscanenabled\n   */\n  @Input() private set playSoundOnScan(newValue: boolean) {\n    this._playSoundOnScan = newValue;\n    this.setPlaySoundOnScan();\n  }\n\n  /**\n   * Whether the device should vibrate after scanning\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#setvibrateonscanenabled\n   */\n  @Input() private set vibrateOnScan(newValue: boolean) {\n    this._vibrateOnScan = newValue;\n    this.setVibrateOnScan();\n  }\n\n  /**\n   * The scan settings to be used for the internal scanner\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#applyscansettings\n   */\n  @Input() private set scanSettings(newValue: ScanSettings) {\n    this._scanSettings = newValue;\n    this.setScanSettings();\n  }\n\n  /**\n   * The target scanning FPS\n   *\n   *  See https://docs.scandit.com/stable/web/classes/barcodepicker.html#settargetscanningfps\n   */\n  @Input() private set targetScanningFPS(newValue: number) {\n    this._targetScanningFPS = newValue;\n    this.setTargetScanningFPS();\n  }\n\n  /**\n   * The fit of the camera preview element\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#setvideofit\n   */\n  @Input() private set videoFit(newValue: BarcodePicker.ObjectFit) {\n    this._videoFit = newValue;\n    this.setVideoFit();\n  }\n\n  /**\n   * Whether the camera preview is visible\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#setvisible\n   */\n  @Input() private set visible(newValue: boolean) {\n    this._visible = newValue;\n    this.setVisible();\n  }\n\n  /**\n   * The \"single image mode\" settings (can only be set at creation)\n   *\n   * See https://docs.scandit.com/stable/web/classes/barcodepicker.html#create\n   */\n  @Input() private set singleImageModeSettings(newValue: SingleImageModeSettings) {\n    this._singleImageModeSettings = newValue;\n  }\n\n  /**\n   * BarcodePicker reference\n   */\n  private picker: BarcodePicker;\n\n  /**\n   * Private variable of `shouldAccessCamera`\n   */\n  private _shouldAccessCamera: boolean = true;\n\n  /**\n   * Private variable of `camera`\n   */\n  private _camera: Camera;\n\n  /**\n   * Private variable of `cameraSettings`\n   */\n  private _cameraSettings: CameraSettings;\n\n  /**\n   * Private variable of `cameraType`\n   */\n  private _cameraType: Camera.Type;\n\n  /**\n   * Private variable of `enableCameraSwitcher`\n   */\n  private _enableCameraSwitcher: boolean;\n\n  /**\n   * Private variable of `enableTorchToggle`\n   */\n  private _enableTorchToggle: boolean;\n\n  /**\n   * Private variable of `setZoomLevel`\n   */\n  private _zoom: number;\n\n  /**\n   * Private variable of `enablePinchToZoom`\n   */\n  private _enablePinchToZoom: boolean;\n\n  /**\n   * Private variable of `mirrorImage`\n   */\n  private _enableMirrorImage: boolean = false;\n\n  /**\n   * Private variable of `enableTapToFocus`\n   */\n  private _enableTapToFocus: boolean;\n\n  /**\n   * Private variable of `guiStyle`\n   */\n  private _guiStyle: BarcodePicker.GuiStyle;\n\n  /**\n   * Private variable of `laserArea`\n   */\n  private _laserArea: SearchArea | undefined;\n\n  /**\n   * Private variable of `viewfinderArea`\n   */\n  private _viewfinderArea: SearchArea | undefined;\n\n  /**\n   * Private variable of `paused`\n   */\n  private _paused: boolean;\n\n  /**\n   * Private variable of `playSoundOnScan`\n   */\n  private _playSoundOnScan: boolean;\n\n  /**\n   * Private variable of `vibrateOnScan`\n   */\n  private _vibrateOnScan: boolean;\n\n  /**\n   * Private variable of `scanSettings`\n   */\n  private _scanSettings: ScanSettings;\n\n  /**\n   * Private variable of `targetScanningFPS`\n   */\n  private _targetScanningFPS: number;\n\n  /**\n   * Private variable of `videoFit`\n   */\n  private _videoFit: BarcodePicker.ObjectFit;\n\n  /**\n   * Private variable of `visible`\n   */\n  private _visible: boolean;\n\n  /**\n   * Private variable of `singleImageModeSettings`\n   */\n  private _singleImageModeSettings: SingleImageModeSettings;\n\n  /**\n   * Reference to the element containing the picker\n   */\n  @ViewChild(\"scanditsdkbarcodepickercontainer\", { static: true }) private readonly pickerContainer: any;\n\n  /**\n   * A queue of operations to be executed\n   *\n   * As soon as a picker is available, there could be changes to the @Input properties,\n   * which trigger operations to be added to this queue.\n   *\n   * As operations on the picker are mostly promises, this queue is executed serially\n   * and should include promise factory functions.\n   */\n  private readonly operationQueue: (() => Promise<any>)[] = [];\n\n  /**\n   * If the component is initialized yet or not\n   */\n  private isInitialized: boolean = false;\n\n  /**\n   * Creates an instance of ScanditSdkBarcodePickerComponent.\n   * @param scanditSdkService Dependency Injection for scanditSdkService\n   */\n  constructor(private readonly scanditSdkService: ScanditSdkService) {}\n\n  /**\n   * Angular Lifecycle hook, on component initialization, create the picker,\n   * set some callback handlers and set the proper states\n   */\n  ngOnInit(): void {\n    const containerElement: HTMLElement = this.pickerContainer.nativeElement;\n    this.init.emit();\n\n    this.scanditSdkService\n      .createPicker(containerElement, {\n        accessCamera: this._shouldAccessCamera,\n        camera: this._camera,\n        cameraSettings: this._cameraSettings,\n        cameraType: this._cameraType,\n        enableCameraSwitcher: this._enableCameraSwitcher,\n        enablePinchToZoom: this._enablePinchToZoom,\n        enableTapToFocus: this._enableTapToFocus,\n        enableTorchToggle: this._enableTorchToggle,\n        guiStyle: this._guiStyle,\n        laserArea: this._laserArea,\n        playSoundOnScan: this._playSoundOnScan,\n        scanningPaused: this._paused,\n        scanSettings: this._scanSettings,\n        singleImageModeSettings: this._singleImageModeSettings,\n        targetScanningFPS: this._targetScanningFPS,\n        vibrateOnScan: this._vibrateOnScan,\n        videoFit: this._videoFit,\n        viewfinderArea: this._viewfinderArea,\n        visible: this._visible,\n      })\n      .then(picker => {\n        this.picker = picker;\n        this.executeOperationQueue();\n        this.picker.on(\"scan\", scanResult => {\n          this.scan.emit(scanResult);\n        });\n        this.picker.on(\"processFrame\", scanResult => {\n          this.processFrame.emit(scanResult);\n        });\n        this.picker.on(\"submitFrame\", scanResult => {\n          this.submitFrame.emit(scanResult);\n        });\n        this.picker.on(\"ready\", () => {\n          this.ready.emit();\n        });\n        this.picker.on(\"scanError\", error => {\n          this.error.emit(error);\n        });\n      });\n\n    this.isInitialized = true;\n  }\n\n  /**\n   * Angular Lifecycle hook to destroy the picker when the component is destroyed\n   */\n  public ngOnDestroy(): void {\n    if (this.picker != null) {\n      this.picker.destroy();\n    } else {\n      this.addToQueue(() => {\n        return Promise.resolve(this.ngOnDestroy());\n      });\n    }\n  }\n\n  /**\n   * Angular Lifecycle hook to execute the operation queue after any Input property changes\n   */\n  public ngOnChanges(): void {\n    if (this.picker != null) {\n      this.executeOperationQueue();\n    }\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setShouldAccessCamera(): void {\n    if (this._shouldAccessCamera) {\n      this.addToQueue(() => {\n        return this.picker.accessCamera();\n      });\n    } else {\n      this.addToQueue(() => {\n        return Promise.resolve((this.paused = true));\n      });\n    }\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setCameraAndSettings(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setActiveCamera(this._camera, this._cameraSettings));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setCameraSettings(): void {\n    this.addToQueue(() => {\n      return this.picker.applyCameraSettings(this._cameraSettings);\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setEnableCameraSwitcher(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setCameraSwitcherEnabled(this._enableCameraSwitcher));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setEnableTorchToggle(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setTorchToggleEnabled(this._enableTorchToggle));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setZoomLevel(): void {\n    this.addToQueue(() => {\n      return this.picker.setZoom(this._zoom);\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setEnablePinchToZoom(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setPinchToZoomEnabled(this._enablePinchToZoom));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setImageMirrorEnabled(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setMirrorImageEnabled(this._enableMirrorImage));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setEnableTapToFocus(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setTapToFocusEnabled(this._enableTapToFocus));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setGuiStyle(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setGuiStyle(this._guiStyle));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setLaserArea(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setLaserArea(this._laserArea));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setViewfinderArea(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setViewfinderArea(this._viewfinderArea));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setPaused(): void {\n    if (this._paused) {\n      this.addToQueue(() => {\n        return Promise.resolve(this.picker.pauseScanning(!this._shouldAccessCamera));\n      });\n    } else {\n      this.addToQueue(() => {\n        return this.picker.resumeScanning();\n      });\n    }\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setPlaySoundOnScan(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setPlaySoundOnScanEnabled(this._playSoundOnScan));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setVibrateOnScan(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setVibrateOnScanEnabled(this._vibrateOnScan));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setScanSettings(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.applyScanSettings(this._scanSettings));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setTargetScanningFPS(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setTargetScanningFPS(this._targetScanningFPS));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setVideoFit(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setVideoFit(this._videoFit));\n    });\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   */\n  private setVisible(): void {\n    this.addToQueue(() => {\n      return Promise.resolve(this.picker.setVisible(this._visible));\n    });\n  }\n\n  /**\n   * Add an operation to be executed to the queue\n   *\n   * @param operation A promise factory function\n   */\n  private addToQueue(operation: () => Promise<any>): void {\n    if (this.isInitialized) {\n      this.operationQueue.push(operation);\n    }\n  }\n\n  /**\n   * Handler to create the operation after an input change\n   * @returns A promise resolving when the operation queue was executed\n   */\n  private executeOperationQueue(): Promise<void> {\n    return this.operationQueue\n      .reduce((promise, func) => {\n        return promise.then(() => {\n          return func().then(() => {\n            const index: number = this.operationQueue.indexOf(func);\n            if (index > -1) {\n              this.operationQueue.splice(index, 1);\n            }\n          });\n        });\n      }, Promise.resolve())\n      .then(() => {\n        if (this.operationQueue.length > 0) {\n          return this.executeOperationQueue();\n        }\n      });\n  }\n}\n","import { Inject, InjectionToken, ModuleWithProviders, NgModule, Optional } from \"@angular/core\";\nimport { ScanditSdkBarcodePickerComponent } from \"./scandit-sdk-barcode-picker.component\";\nimport { ScanditSdkServiceConfig } from \"./scandit-sdk.service\";\n\n/**\n * Scandit Web SDK Module\n */\n@NgModule({\n  declarations: [ScanditSdkBarcodePickerComponent],\n  exports: [ScanditSdkBarcodePickerComponent]\n})\nexport class ScanditSdkModule {\n  static loaded: boolean = false;\n\n  constructor(@Inject(\"ScanditSdkModuleInstance\") instance: ScanditSdkModule) { }\n\n  static factory(): void {\n    if (ScanditSdkModule.loaded) {\n      throw new Error(\"ScanditSdkModule is already loaded. Import it in the AppModule only\");\n    }\n    ScanditSdkModule.loaded = true;\n  }\n\n  static forRoot(\n    licenseKey: string,\n    options: { engineLocation: string; preloadEngine?: boolean; preloadBlurryRecognition?: boolean }\n  ): ModuleWithProviders<ScanditSdkModule> {\n    return {\n      ngModule: ScanditSdkModule,\n      providers: [\n        {\n          provide: \"ScanditSdkModuleInstance\",\n          useFactory: ScanditSdkModule.factory\n        },\n        {\n          provide: ScanditSdkServiceConfig,\n          useValue: {\n            licenseKey,\n            options\n          }\n        }\n      ]\n    };\n  }\n\n  static forChild(): ModuleWithProviders<ScanditSdkModule> {\n    return {\n      ngModule: ScanditSdkModule,\n      providers: []\n    };\n  }\n}\n","/*\n * Public API Surface of scandit-sdk-angular\n */\n// tslint:disable-next-line:missing-jsdoc\nexport * from \"./lib/scandit-sdk.service\";\nexport * from \"./lib/scandit-sdk-barcode-picker.component\";\nexport * from \"./lib/scandit-sdk.module\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.ScanditSdkService"],"mappings":"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"}